1. python -m venv venv
2. source venv/Scripts/activate
3. pip install django
4. pip freeze > requirements.txt
5. django-admin startproject my_pjt . (현재 위치에 폴더 생성)
6. python manage.py runserver
7. python manage.py startapp articles
8. [settings] - [INSTALLED_APPS] - 'articles'
9. [urls.py] - from articles import views
9. [urls.py] - [urlpatterns] - path('index/', views.index),
10. [views.py] - def index(request) : return render(request, 'index.html')
11. templates 폴더 생성 - index.html 파일 생성 - ! enter - body 에 사용

-----------------------------------------------------------------------------------------------

1. [urls.py] - path('dinner/', views.dinner ), 
2. [views.py] - 
def dinner(request) :
    return render(request, 'dinner.html')
3. [templates] - dinner.html 생성, 표시용으로 body에 내용 넣기
4. 잘 되는지 확인
5. [views.py] 내용 추가
def dinner(request) :
    username = '김민정'
    foods = ['치킨', '피자', '족발', '프로틴', '닭가슴살', '보쌈', '햄버거']
    # render에 넘기는 데이터는 딕셔너리로 작성
    context = {
        'username' : username,
        'foods' : foods,
    }
    return render(request, 'dinner.html', context)
6. dinner.html 들어가서 원하는 내용으로 구성하기
  <p>{{ username }} - {{ username|length}}</p>
  <p>{{ foods }} - {{ foods|length}}</p>

  <h3>민정이가 한 끼에 먹은 음식들 : </h3>
  {% for food in foods %}
    <p>
      {{ food }}
    </p>
    {% if food == '프로틴' %}
      <p> 김지훈 헬창~~~ </p>
    {% endif %}
  {% empty %}
    <p>빈 리스트입니다.</p>
  {% endfor %}

다양한 걸 할 수 있음!

----------------------------------------------------
bootstrap


1. [templates] - base.html 생성
2. bootstrap CDN 가져오기
3. block 태그 만들기 : 여러개를 만들 수 있으므로 이름을 지정해줘야 함
4. [index.html] -
{% extends "base.html" %}	#최상단

{% block content %}

<h1>index page</h1>

{% endblock content %}

---------------------------------------------------
app 생성
1. python manage.py startapp pages
2. [pjt] - [settings.py] - app 등록
3. [articles] 폴더에 urls.py 생성
4. urlpatterns 만들기
5. from django.urls import path
6. [pjt] - [urls.py]에 있던 내용 가져오기
from . import views
    path('index/', views.index),

    path('dinner/', views.dinner ), 

7.  [pjt] - [urls.py] 수정
    path('articles/', include('articles.urls')),

    path('pages/', include('pages.urls'))


-------------------------------------------------
앱이 2개 이상이 되면 index, views 등 같은 이름이 생겨서 오류가 생길 수 있음
앱의 templates 안에 앱과 같은 이름의 파일을 하나 더 만들어서 그 안에 파일 넣기
경로를 pages/index.html , articles/index.html 으로 수정

1. 앱 아래 urls.py 를 만든다
2. 프로젝트의 urls.py 내용을 앱 아래 urls에 옮기고 불필요한 내용은 지운다
3. 앱/ 으로 시작하는 것들을 앱 아래 urls로 가져온다
4. 프로젝트의 urls 에서  path('todos/', include('todos.urls')) 로 바꿔준다.

------------------------------------------
variable routing
<articles/1/>

1. articles - [urls.py] 
    path('<int:article_id>/', views.detail),

2. articles - [views.py]
def detail(request, articles_id) :
    print(article_id)
    print('=================================')

<articles/hello/김민정/>
※ 이게 위에 존재하면 아래에 있는 함수들이 잡아먹힘(뭘 치던 모두 문자열로 인식됨)

1. articles - [urls.py] 
path('hello/<str:username>', views.hello ),

2. articles - [views.py]
def hello(request, username) :
    context = {
        'username' : username,
    }

    return render(request, 'articles/hello.html', context)

------------------------------------------------------------
throw - catch
1. articles - [urls.py] 
    path('throw/', views.throw),
    path('catch/', views.catch)

2. articles - [views.py]

--------------------------------------------------------
app_name = ''
을 입력하면 아래는 'todos : index' 형식으로 작성해야 함

(변경 전-base.html)
    <a href="{% url "index" %}">메인 페이지</a>
    <a href="{% url "create" %}">할 일 추가</a> |
    
(변경 후)
    <a href="{% url "todos:index" %}">메인 페이지</a>
    <a href="{% url "todos:create" %}">할 일 추가</a> |
    


